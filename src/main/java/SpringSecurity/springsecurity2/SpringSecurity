开发环境搭建
我们依然使用之前的模板来搭建图书管理系统项目

导入以下依赖:
                     <!-- 技术栈(建议为各个依赖进行分类 到后期我们的项目可能会导入很多依赖 添加注释会大幅度提高阅读效率) -->
                        <dependencies>
                            <!-- Spring框架依赖 -->
                            <dependency>
                                <groupId>org.springframework.security</groupId>
                                <artifactId>spring-security-web</artifactId>
                                <version>5.5.3</version>
                            </dependency>
                            <dependency>
                                <groupId>org.springframework.security</groupId>
                                <artifactId>spring-security-config</artifactId>
                                <version>5.5.3</version>
                            </dependency>
                            <dependency>
                                <groupId>org.springframework</groupId>
                                <artifactId>spring-webmvc</artifactId>
                                <version>5.3.14</version>
                            </dependency>

                            <!-- 持久层框架依赖 -->
                            <dependency>
                                <groupId>mysql</groupId>
                                <artifactId>mysql-connector-java</artifactId>
                                <version>5.1.43</version>
                            </dependency>
                            <dependency>
                                <groupId>org.mybatis</groupId>
                                <artifactId>mybatis-spring</artifactId>
                                <version>2.0.6</version>
                            </dependency>
                            <dependency>
                                <groupId>org.mybatis</groupId>
                                <artifactId>mybatis</artifactId>
                                <version>3.5.7</version>
                            </dependency>
                            <dependency>
                                <groupId>org.springframework</groupId>
                                <artifactId>spring-jdbc</artifactId>
                                <version>5.3.14</version>
                            </dependency>
                            <dependency>
                                <groupId>com.zaxxer</groupId>
                                <artifactId>HikariCP</artifactId>
                                <version>3.4.5</version>
                            </dependency>

                            <!-- 其他工具框架依赖: Lombok SLF4J thymeleaf -->
                            <dependency>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>1.18.22</version>
                            </dependency>
                            <dependency>
                                <groupId>org.slf4j</groupId>
                                <artifactId>slf4j-jdk14</artifactId>
                                <version>1.7.32</version>
                            </dependency>
                            <dependency>
                                <groupId>org.thymeleaf</groupId>
                                <artifactId>thymeleaf-spring5</artifactId>
                                <version>3.0.14.RELEASE</version>
                            </dependency>

                            <!-- ServletAPI annotationAPI-->
                            <dependency>
                                <groupId>javax.servlet</groupId>
                                <artifactId>javax.servlet-api</artifactId>
                                <version>4.0.1</version>
                                <scope>provided</scope>
                            </dependency>
                            <dependency>
                                <groupId>javax.annotation</groupId>
                                <artifactId>javax.annotation-api</artifactId>
                                <version>1.3.2</version>
                            </dependency>

                            <!-- JUnit依赖 -->
                            <dependency>
                                <groupId>org.junit.jupiter</groupId>
                                <artifactId>junit-jupiter-api</artifactId>
                                <version>${junit.version}</version>
                                <scope>test</scope>
                            </dependency>
                            <dependency>
                                <groupId>org.junit.jupiter</groupId>
                                <artifactId>junit-jupiter-engine</artifactId>
                                <version>${junit.version}</version>
                                <scope>test</scope>
                            </dependency>
                        </dependencies>

接着创建Initializer来配置Web应用程序:
                    public class MvcInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {

                        @Override
                        protected Class<?>[] getRootConfigClasses() {
                            return new Class[]{RootConfiguration.class};
                        }

                        @Override
                        protected Class<?>[] getServletConfigClasses() {
                            return new Class[]{MvcConfiguration.class};
                        }

                        @Override
                        protected String[] getServletMappings() {
                            return new Class[]{"/"};
                        }

                    }

创建Mvc配置类:
                    @ComponentScan("book.manager.controller")
                    @Configuration
                    @EnableWebMvc
                    public class MvcConfiguration implements WebMvcConfigurer {

                        // 我们需要使用ThymeleafViewResolver作为视图解析器 并解析我们的HTML页面
                        @Bean
                        public ThymeleafViewResolver thymeleafViewResolver(@Autowired SpringTemplateEngine springTemplateEngine){
                            ThymeleafViewResolver resolver = new ThymeleafViewResolver();
                            resolver.setOrder(1);
                            resolver.setCharacterEncoding("UTF-8");
                            resolver.setTemplateEngine(springTemplateEngine);
                            return resolver;
                        }

                        // 配置模板解析器
                        @Bean
                        public SpringResourceTemplateResolver templateResolver(){
                            SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();
                            resolver.setSuffix(".html");
                            resolver.setPrefix("/WEB-INF/template/");
                        }

                        // 配置模板引擎Bean
                        @Bean
                        public SpringTemplateEngine springTemplateEngine(@Autowired ITemplateResolver resolver){
                            SpringTemplateEngine engine = new SpringTemplateEngine();
                            engine.setTemplateResolver(resolver);
                            return engine;
                        }

                        // 开启静态资源处理
                        @Override
                        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer){
                            configurer.enable();
                        }
                        // 静态资源路径配置
                        @Override
                        public void addResourceHandlers(){
                            registry.addResourceHandler("/static/**").addResourceLocations("/WEB-INF/static/");
                        }

                    }

创建Root配置类:
                    @Configuration
                    public class RootConfiguration {

                    }

最后创建专用与响应页面的Controller即可:
                    /**
                     * 专用于处理页面响应的控制器
                     */
                    @Controller
                    public class PageController {

                        @RequestMapping("/index")
                        public String login(){
                            return "/index";
                        }

                    }

接着我们需要将前端页面放到对应的文件夹中 然后开启服务器并通过浏览器 成功访问

接着我们需要配置SpringSecurity 与Mvc一样 需要一个初始化器:
                    public class SecurityInitializer extends AbstractSecurityWebApplicationInitializer {
                        // 不用重写任何内容
                        // 这里实际上会自动注册一个Filter SpringSecurity底层就是依靠N个过滤器实现的 我们之后再探讨
                    }

接着我们需要再创建一个配置类用于配置SpringSecurity:
                    @Configuration
                    @EnableWebSecurity
                    public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
                        // 继承WebSecurityConfigurerAdapter 之后会进行配置
                    }

接着在根容器中添加此配置文件即可:
                    @Override
                    protected Class<?>[] getRootConfigClasses() {
                        return new Class[]{RootConfiguration.class, SecurityConfiguration.class};
                    }

这样 SpringSecurity的配置就完成了 我们再次运行项目 会发现无法进入的我们的页面中 无论我们访问哪个页面 都会进入到SpringSecurity为我们提供的一个默认登录页面 之后我们会讲解如何进行配置

到此 项目环境搭建完成