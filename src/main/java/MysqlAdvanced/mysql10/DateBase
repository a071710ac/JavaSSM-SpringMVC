记录锁 间隙锁和临键锁
我们知道InnoDB支持使用行锁 但是行锁比较复杂 他可以继续分为多个类型

记录锁
(Record Locks)记录锁 仅仅锁住索引记录的一行 在单条索引记录上加锁 Record lock锁住的永远是索引 而非记录本身 即使该表上没有任何索引 那么innoDB会在后台创建一个隐藏的聚集主键索引
那么锁住的就是这个隐藏的聚集主键索引 所以说当一条sql没有走任何索引时 那么将会在每一条聚合索引后面加写锁 这个类似于表锁 但原理上和表锁应该是完全不同的

间隙锁
(Gap Locks)仅仅锁住一个索引区间(开区间 不包括双端端点) 在索引记录之间的间隙中加锁 或者是在某一条索引记录之前或者之后加锁
并不包括该索引记录本身 比如在1, 2中 间隙锁的可能值有(-∞, 1) (1, 2) (2, +∞) 间隙锁可用于防止幻读 保证索引间的不会被插入数据

临键锁
(Next-Key Locks) Record lock + Gap lock 左开右闭区间 默认情况下 InnoDB正是使用Next-Key Locks来锁定记录(如select ... for update语句) 它还会根据场景进行灵活变换:

                                   场景                                       转换
                    使用唯一索引进行精确匹配 但表中不存在记录                 自动转换为Gap Locks
                    使用唯一索引进行精确匹配 且表中存在记录                 自动转换为Record Locks
                    使用非唯一索引进行精确匹配                                   不转换
                    使用唯一索引进行范围匹配                            不转换 但是只锁上界 不锁下界